heat_template_version: 2017-09-01

description: >
  HOT template that invokes subtemplates

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    description: Name of image to use for GNU/Linux servers
    default: Ubuntu Server 18.04 LTS (Bionic Beaver) amd64
  flavor_man:
     type: string
     description: Flavor to use for manager
  flavor_rest:
     type: string
     description: Flavor to use for servers
  flavor_web:
     type: string
     description: Flavor for webserver
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
    default: ntnu-internal
  open_ports_linux:
    type: comma_delimited_list
    description: >
      List of port ranges for which to create security group rules for incomning tcp traffic
      Format: [ port_from-port_to, port, [port_from, port_to], ... ]
    default:
      - 22
      - 80
      - 443

resources:
  # Parsing port parameters into lists that repeat can iterate over:
  _open_ports_linux_from:
    type: OS::Heat::Value
    properties:
      type: comma_delimited_list
      value:
        yaql:
          data: { get_param: open_ports_linux }
          expression: $.data.select(list(list($).flatten().join('-').split('-').repeat().flatten().take(2))[0])
  _open_ports_linux_to:
    type: OS::Heat::Value
    properties:
      type: comma_delimited_list
      value:
        yaql:
          data: { get_param: open_ports_linux }
          expression: $.data.select(list(list($).flatten().join('-').split('-').repeat().flatten().take(2))[1])

  iac_base:
    type: iac_base.yaml
    properties:
      key_name:          { get_param:    key_name }
      image_linux:       { get_param: image }
      flavor_manager:    { get_param: flavor_man }
      public_net:        { get_param:    public_net }
      sec_group_linux:
        - { get_resource: sec_group_iac_common }
        - { get_resource: sec_group_linux }

  iac_rest:
    type: iac_rest.yaml
    depends_on: iac_base
    properties:
      key_name: { get_param:    key_name }
      image: { get_param:    image }
      sec_group_linux:
        - { get_resource: sec_group_iac_common }
        - { get_resource: sec_group_linux }
      flavor: { get_param: flavor_rest }
      flavor_web: { get_param: flavor_web }
      public_net:               { get_param:    public_net }
      admin_net:                { get_attr:     [iac_base,admin_net] }
      admin_subnet:             { get_attr:     [iac_base,admin_subnet] }
      manager_ip:               { get_attr:     [iac_base,manager_ip] }

  sec_group_iac_common:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Common rules for iac VMs. Allows any traffic between any VM in this security group.
  sec_group_rule_iac_common_in4_icmp:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: sec_group_iac_common }
      direction: ingress
      ethertype: IPv4
      protocol: icmp
      remote_group: { get_resource: sec_group_iac_common }
  sec_group_rule_iac_common_in6_icmp:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: sec_group_iac_common }
      direction: ingress
      ethertype: IPv6
      protocol: icmp
      remote_group:   { get_resource: sec_group_iac_common }
  sec_group_rule_iac_common_in4_tcp:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: sec_group_iac_common }
      direction: ingress
      ethertype: IPv4
      protocol: tcp
      remote_group: { get_resource: sec_group_iac_common }
  sec_group_rule_iac_common_in6_tcp:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: sec_group_iac_common }
      direction: ingress
      ethertype: IPv6
      protocol: tcp
      remote_group:   { get_resource: sec_group_iac_common }
  sec_group_rule_iac_common_in4_udp:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: sec_group_iac_common }
      direction: ingress
      ethertype: IPv4
      protocol: udp
      remote_group: { get_resource: sec_group_iac_common }
  sec_group_rule_iac_common_in6_udp:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: sec_group_iac_common }
      direction: ingress
      ethertype: IPv6
      protocol: udp
      remote_group:   { get_resource: sec_group_iac_common }
  sec_group_rule_iac_common_out4:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: sec_group_iac_common }
      direction: egress
      ethertype: IPv4
      remote_ip_prefix: 0.0.0.0/0
  sec_group_rule_iac_common_out6:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: sec_group_iac_common }
      direction: egress
      ethertype: IPv6
      remote_ip_prefix: ::/0

  sec_group_linux:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for Linux server
      rules:
        repeat:
          for_each:
            <%port_min%>: { get_attr: [_open_ports_linux_from, value] }
            <%port_max%>: { get_attr: [_open_ports_linux_to, value] }
          template:
            remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: <%port_min%>
            port_range_max: <%port_max%>
          permutations: false
        # Ingress VNC machines 25901-25999
        - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: tcp, port_range_min: 25901, port_range_max: 25999}
outputs:
  manager_ip:
    description: IP address of manager in the admin network
    value: { get_attr: [iac_base,manager_ip] }
